{"version":3,"sources":["services/index.ts","components/CardHero/ProgressBar.tsx","components/CardHero/CardHero.tsx","pages/Dashboard/Dashboard.tsx"],"names":["ApiUrl","process","ApiKey","setHeroes","resSuccess","dispatch","data","map","item","value","pushHerotoList","fetchSearchHero","params","a","setLoading","axios","get","res","results","resetList","Error","fetchHeroes","requets","id","Promise","allSettled","resSucces","filter","status","ProgressBar","progress","title","ariaMax","className","role","style","width","defaultProps","index","props","name","powerstats","fullName","alignment","image","src","url","alt","Number","combat","durability","intelligence","power","speed","strength","Dashboard","useDispatch","heroesList","useSelector","state","superHeroes","list","loading","lastId","length","getIdArray","idArray","i","push","getHeroes","useEffect","window","onscroll","document","documentElement","scrollHeight","scrollTop","clientHeight","hero","CardHero","biography","appearance","Loader"],"mappings":"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","file":"static/js/4.fe23d7b9.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport axios from 'axios'\nimport { pushHerotoList, resetList, setLoading } from 'store/slices/superHeroes'\n\nconst ApiUrl = process.env.REACT_APP_API_URL\nconst ApiKey = process.env.REACT_APP_API_KEY\n\nconst filterSuccess = (response: any[]) => response.filter((item: any) => item.status === 'fulfilled')\n\nconst setHeroes = (resSuccess: any[], dispatch: Function) => {\n  const data = resSuccess.map((item) => item.value.data)\n  dispatch(pushHerotoList(data))\n}\n\nconst fetchHeroes = (params: number[]) => async (dispatch: Function) => {\n  dispatch(setLoading(true))\n  const requets = params.map((id) => axios.get(`${ApiUrl}${ApiKey}/${id}`))\n  try {\n    const res = await Promise.allSettled(requets)\n    const resSucces = filterSuccess(res)\n    setHeroes(resSucces, dispatch)\n  } catch (error) {\n    throw new Error(error as string)\n  } finally {\n    dispatch(setLoading(false))\n  }\n}\n\nexport const fetchSearchHero = (params: string) => async (dispatch: Function) => {\n  dispatch(setLoading(true))\n  try {\n    const res = await axios.get(`${ApiUrl}${ApiKey}/search/${params}`)\n    const data = res.data.results || []\n    dispatch(resetList())\n    dispatch(pushHerotoList(data))\n  } catch (error) {\n    throw new Error(error as string)\n  } finally {\n    dispatch(setLoading(false))\n  }\n}\n\nexport default fetchHeroes\n","import PropTypes from 'prop-types'\n\ninterface ProgressBarProps {\n  progress: number\n  title?: string\n  ariaMax?: number\n}\n\nconst ProgressBar = ({ progress, title, ariaMax }: ProgressBarProps) => (\n  <div className=\"progress mt-1\">\n    <div\n      className=\"progress-bar\"\n      role=\"progressbar\"\n      style={{ width: `${progress}%` }}\n      aria-valuenow={progress}\n      aria-valuemin={0}\n      aria-valuemax={ariaMax}\n    >\n      {`${progress}% ${title}`}\n    </div>\n  </div>\n)\n\nProgressBar.propTypes = {\n  progress: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  ariaMax: PropTypes.number,\n}\n\nProgressBar.defaultProps = {\n  title: '',\n  ariaMax: 100,\n}\n\nexport default ProgressBar\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport { Appearance, Image, Powerstats } from 'interfaces/Hero.interface'\nimport ProgressBar from './ProgressBar'\n\ninterface CardProps {\n  name: string\n  powerstats: Powerstats\n  fullName: string\n  alignment: string\n  appearance: Appearance | any\n  image: Image\n}\n\nconst index = (props: CardProps) => {\n  const { name, powerstats, fullName, alignment, /* appearance, */ image } = props\n  return (\n    <div className=\"card p-3 mb-2\">\n      <div className=\"d-flex justify-content-between\">\n        <div className=\"d-flex flex-row align-items-center\">\n          <div className=\"avatar\">\n            <img className=\"img-fluid\" src={image.url} alt={`${fullName}.profile`} />\n          </div>\n          <div className=\"ms-2 c-details\">\n            <h6 className=\"mb-0\">{name}</h6> <span>{fullName}</span>\n          </div>\n        </div>\n        <div className=\"badge\">\n          {' '}\n          <span>{alignment}</span>{' '}\n        </div>\n      </div>\n      <div>\n        <div className=\"mt-3\">\n          <span>Combate:</span> <ProgressBar progress={Number(powerstats.combat) || 0} />\n          <span>Durabilidad:</span> <ProgressBar progress={Number(powerstats.durability) || 0} ariaMax={80} />\n          <span>Inteligencia:</span> <ProgressBar progress={Number(powerstats.intelligence) || 0} ariaMax={80} />\n          <span>Poder:</span> <ProgressBar progress={Number(powerstats.power) || 0} ariaMax={80} />\n          <span>Velocidad:</span> <ProgressBar progress={Number(powerstats.speed) || 0} ariaMax={80} />\n          <span>Fuerza:</span> <ProgressBar progress={Number(powerstats.strength) || 0} ariaMax={80} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default index\n","import { RootState } from 'store'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useEffect } from 'react'\nimport CardHero from 'components/CardHero'\nimport fetchHeroes from 'services'\nimport Loader from 'components/Loader'\n\nconst Dashboard = () => {\n  const dispatch = useDispatch()\n  const heroesList = useSelector((state: RootState) => state.superHeroes.list)\n  const loading = useSelector((state: RootState) => state.superHeroes.loading)\n  const lastId = +(heroesList[heroesList.length - 1]?.id ?? 0)\n\n  const getIdArray = () => {\n    const idArray = []\n    for (let i = lastId; i < lastId + 10; i += 1) {\n      idArray.push(i + 1)\n    }\n    return idArray\n  }\n\n  const getHeroes = async () => {\n    dispatch(fetchHeroes(getIdArray()))\n  }\n\n  useEffect(() => {\n    dispatch(fetchHeroes(getIdArray()))\n    return () => {}\n  }, [])\n\n  useEffect(() => {\n    window.onscroll = () => {\n      if (\n        document.documentElement.scrollHeight - document.documentElement.scrollTop ===\n        document.documentElement.clientHeight\n      ) {\n        if (!loading) getHeroes()\n      }\n    }\n    return () => {\n      window.onscroll = null\n    }\n  }, [loading])\n\n  return (\n    <div className=\"custom-container\">\n      <div className=\"mt-5 mb-3\">\n        <div className=\"row\">\n          {heroesList.map((hero) => (\n            <div className=\"col-md-4\" key={hero.id}>\n              <CardHero\n                name={hero.name}\n                powerstats={hero.powerstats}\n                fullName={hero.biography[`full-name`]}\n                alignment={hero.biography.alignment}\n                appearance={hero.appearance}\n                image={hero.image}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n      {loading && <Loader />}\n    </div>\n  )\n}\n\nexport default Dashboard\n"],"sourceRoot":""}