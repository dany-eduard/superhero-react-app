{"version":3,"sources":["constants/constantsHero.ts","pages/Habilidades/Habilidades.tsx","components/CardHero/ProgressBar.tsx","components/CardHero/CardHero.tsx"],"names":["SelectPowerstatsOptions","label","value","SortOptions","Habilidades","heroesList","useSelector","state","superHeroes","list","useState","isLoading","setIsLoading","alertDanger","setAlertDanger","sortedHeroesList","setSortedHeroesList","skill","sortOption","selectedOption","setSelectedOption","handleSelectChange","name","e","className","role","isClearable","onChange","options","placeholder","type","id","onClick","setTimeout","sort","property","sortedSkill","array","nums","flatMap","curr","powerstats","match","a","b","filter","num","strings","string","localeCompare","sortPropertyArray","sortedHeroes","forEach","hero","includes","push","sortHeroes","Loader","length","map","CardHero","fullName","biography","alignment","appearance","image","href","ProgressBar","progress","title","ariaMax","style","width","defaultProps","index","props","src","url","alt","Number","combat","durability","intelligence","power","speed","strength"],"mappings":"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","file":"static/js/7.8b4ac9ac.chunk.js","sourcesContent":["export const SelectPowerstatsOptions = [\n  {\n    label: 'Inteligencia',\n    value: 'intelligence',\n  },\n  {\n    label: 'Fuerza',\n    value: 'strength',\n  },\n  {\n    label: 'Velocidad',\n    value: 'speed',\n  },\n  {\n    label: 'Durabilidad',\n    value: 'durability',\n  },\n  {\n    label: 'Poder',\n    value: 'power',\n  },\n  {\n    label: 'Combate',\n    value: 'combat',\n  },\n]\n\nexport const SortOptions = [\n  {\n    label: 'Ascendente',\n    value: 'asc',\n  },\n  {\n    label: 'Descendente',\n    value: 'desc',\n  },\n]\n","import { Hero } from 'interfaces/Hero.interface'\nimport { RootState } from 'store'\nimport { SelectPowerstatsOptions, SortOptions } from 'constants/constantsHero'\nimport { useSelector } from 'react-redux'\nimport { useState } from 'react'\nimport CardHero from 'components/CardHero'\nimport Loader from 'components/Loader'\nimport Select, { SingleValue } from 'react-select'\n\ninterface OSelect {\n  label: string\n  value: string\n}\n\ninterface SortSelect extends OSelect {\n  value: 'asc' | 'desc' | string\n}\n\ninterface SelectedOptions {\n  skill: OSelect | null\n  sortOption: SortSelect | null\n}\n\nconst Habilidades = () => {\n  const heroesList = useSelector((state: RootState) => state.superHeroes.list)\n  const [isLoading, setIsLoading] = useState(false)\n  const [alertDanger, setAlertDanger] = useState(false)\n  const [sortedHeroesList, setSortedHeroesList] = useState([] as Hero[] as any[])\n  const [selectedOption, setSelectedOption] = useState<SelectedOptions>({\n    skill: null,\n    sortOption: null,\n  })\n\n  const handleSelectChange = (name: string) => (e: SingleValue<OSelect | null>) => {\n    setSelectedOption({ ...selectedOption, [name]: e })\n  }\n\n  const sortPropertyArray = (array: any[], property: string, sortOption: 'asc' | 'desc') => {\n    /**\n     * flatMap: Devuelve una versión aplanada del arreglo.\n     * match con regex: Obtiene las ocurrencias de una expresión regular.\n     * sort: Devuelve un arreglo ordenado.\n     * filter: Crea un nuevo arreglo con todos los elementos que cumplan una condición.\n     * spreat: Permite a un elemento iterable ser expandido (concatenación para esta solución).\n     */\n    const nums = array\n      .flatMap((curr: any) => curr.powerstats[property].match(/(\\d+)/g))\n      .sort((a: any, b: any) => (sortOption === 'asc' ? a - b : b - a))\n      .filter((num: any) => num)\n\n    const strings = array\n      .flatMap((curr: any) => curr.powerstats[property].match(/^[A-Za-z]+$/))\n      .filter((string: any) => string)\n      .sort((a: any, b: any) => a.localeCompare(b))\n\n    return sortOption === 'asc' ? [...strings, ...nums] : [...nums, ...strings]\n  }\n\n  const sortHeroes = (property: string, sortedSkill: string[] | number[]) => {\n    const sortedHeroes: Hero[] = []\n    sortedSkill.forEach((skill) => {\n      heroesList.forEach((hero: Hero) => {\n        if (!sortedHeroes.includes(hero) && hero.powerstats[property] === skill) {\n          sortedHeroes.push(hero)\n        }\n      })\n    })\n\n    return sortedHeroes\n  }\n\n  const validateFilters = () => {\n    if (!selectedOption.skill || !selectedOption.sortOption) {\n      setAlertDanger(true)\n      setTimeout(() => {\n        setAlertDanger(false)\n      }, 4000)\n      return false\n    }\n    return true\n  }\n\n  const handleFilter = () => {\n    if (!validateFilters()) return\n    setIsLoading(true)\n    const { skill, sortOption } = selectedOption\n    const sort = sortOption ? sortOption.value : 'asc'\n    const property = skill ? skill.value : 'intelligence'\n    if (skill && sortOption) {\n      if (sort === 'asc' || sort === 'desc') {\n        const sortedSkill = sortPropertyArray(heroesList, property, sort)\n        const sortedHeroes = sortHeroes(property, sortedSkill)\n        setSortedHeroesList(sortedHeroes)\n      }\n    }\n    setIsLoading(false)\n  }\n\n  return (\n    <div className=\"custom-container\">\n      <h2>Habilidades</h2>\n      <p>\n        Desde este módulo puedes filtrar por habilidad en orden ascendente o descendente la lista de Super Héroes\n        previamente cargada en el Inicio <small>(dashboard)</small>.\n      </p>\n\n      {alertDanger && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          Debe seleccionar una habilidad y una opción de ordenamiento para poder filtrar.\n        </div>\n      )}\n\n      <div className=\"row\">\n        <div className=\"col-md-5\">\n          <Select\n            className=\"mt-1 mb-1\"\n            isClearable\n            onChange={handleSelectChange('skill')}\n            options={SelectPowerstatsOptions}\n            placeholder=\"Selecciona una habilidad\"\n            value={selectedOption.skill}\n          />\n        </div>\n        <div className=\"col-md-5\">\n          <Select\n            className=\"mt-1 mb-1\"\n            isClearable\n            onChange={handleSelectChange('sortOption')}\n            options={SortOptions}\n            placeholder=\"Selecciona la forma de ordenar\"\n            value={selectedOption.sortOption}\n          />\n        </div>\n        <div className=\"col-md-2\">\n          <div className=\"d-grid gap-2 mt-1 mb-1\">\n            <button type=\"button\" id=\"btn-order-powerstats\" className=\"btn btn-primary\" onClick={handleFilter}>\n              Filtrar\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"mt-5 mb-3\">\n          <div className=\"row\">\n            {sortedHeroesList.length > 0 &&\n              sortedHeroesList.map((hero) => (\n                <div className=\"col-md-4\" key={hero.id}>\n                  <CardHero\n                    name={hero.name}\n                    powerstats={hero.powerstats}\n                    fullName={hero.biography[`full-name`]}\n                    alignment={hero.biography.alignment}\n                    appearance={hero.appearance}\n                    image={hero.image}\n                  />\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n      {heroesList.length === 0 && (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          No existen héroes en la lista. Vuelva al{' '}\n          <a href=\"/superhero-react-app\" className=\"alert-link\">\n            Inicio\n          </a>{' '}\n          para precargar algunos.\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Habilidades\n","import PropTypes from 'prop-types'\n\ninterface ProgressBarProps {\n  progress: number\n  title?: string\n  ariaMax?: number\n}\n\nconst ProgressBar = ({ progress, title, ariaMax }: ProgressBarProps) => (\n  <div className=\"progress mt-1\">\n    <div\n      className=\"progress-bar\"\n      role=\"progressbar\"\n      style={{ width: `${progress}%` }}\n      aria-valuenow={progress}\n      aria-valuemin={0}\n      aria-valuemax={ariaMax}\n    >\n      {`${progress}% ${title}`}\n    </div>\n  </div>\n)\n\nProgressBar.propTypes = {\n  progress: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  ariaMax: PropTypes.number,\n}\n\nProgressBar.defaultProps = {\n  title: '',\n  ariaMax: 100,\n}\n\nexport default ProgressBar\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport { Appearance, Image, Powerstats } from 'interfaces/Hero.interface'\nimport ProgressBar from './ProgressBar'\n\ninterface CardProps {\n  name: string\n  powerstats: Powerstats\n  fullName: string\n  alignment: string\n  appearance: Appearance | any\n  image: Image\n}\n\nconst index = (props: CardProps) => {\n  const { name, powerstats, fullName, alignment, /* appearance, */ image } = props\n  return (\n    <div className=\"card p-3 mb-2\">\n      <div className=\"d-flex justify-content-between\">\n        <div className=\"d-flex flex-row align-items-center\">\n          <div className=\"avatar\">\n            <img className=\"img-fluid\" src={image.url} alt={`${name}.profile`} />\n          </div>\n          <div className=\"ms-2 c-details\">\n            <h6 className=\"mb-0\">{name}</h6> <span>{fullName}</span>\n          </div>\n        </div>\n        <div className={`alignment-container fst-italic ${alignment === 'good' ? 'text-success' : 'text-warning'}`}>\n          {' '}\n          <span>{alignment}</span>{' '}\n        </div>\n      </div>\n      <div>\n        <div className=\"mt-3\">\n          <span>Combate:</span> <ProgressBar progress={Number(powerstats.combat) || 0} />\n          <span>Durabilidad:</span> <ProgressBar progress={Number(powerstats.durability) || 0} ariaMax={80} />\n          <span>Inteligencia:</span> <ProgressBar progress={Number(powerstats.intelligence) || 0} ariaMax={80} />\n          <span>Poder:</span> <ProgressBar progress={Number(powerstats.power) || 0} ariaMax={80} />\n          <span>Velocidad:</span> <ProgressBar progress={Number(powerstats.speed) || 0} ariaMax={80} />\n          <span>Fuerza:</span> <ProgressBar progress={Number(powerstats.strength) || 0} ariaMax={80} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default index\n"],"sourceRoot":""}