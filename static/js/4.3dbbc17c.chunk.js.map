{"version":3,"sources":["pages/Apariencia/Apariencia.tsx","components/CardHero/ProgressBar.tsx","components/CardHero/CardHero.tsx","constants/constantsHero.ts"],"names":["Apariencia","name","heroesList","useSelector","state","superHeroes","list","useState","isLoading","setIsLoading","alertDanger","setAlertDanger","filtered","setfFiltered","filteredHeroesList","setFilteredHeroesList","characteristic","value","filterOption","setFilterOption","className","role","isClearable","onChange","e","options","SelectAppearanceOptions","placeholder","autoComplete","id","target","type","onClick","setTimeout","property","filteredHeroes","filter","hero","heroProperty","appearance","includes","toString","toLowerCase","trim","Loader","length","map","CardHero","powerstats","fullName","biography","alignment","image","showAppearance","href","ProgressBar","progress","title","ariaMax","style","width","defaultProps","index","props","showPowerStats","src","url","alt","Number","combat","durability","intelligence","power","speed","strength","gender","race","height","weight","SelectPowerstatsOptions","label","SortOptions"],"mappings":"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","file":"static/js/4.3dbbc17c.chunk.js","sourcesContent":["import { Hero } from 'interfaces/Hero.interface'\nimport { Input } from 'components/Inputs'\nimport { OSelect } from 'interfaces/Geneal.interface'\nimport { RootState } from 'store'\nimport { SelectAppearanceOptions } from 'constants/constantsHero'\nimport { useSelector } from 'react-redux'\nimport { useState } from 'react'\nimport Select, { SingleValue } from 'react-select'\nimport Loader from 'components/Loader'\nimport CardHero from 'components/CardHero'\n\ninterface IFilter {\n  characteristic: OSelect | null\n  value: string | null\n}\n\nconst Apariencia = () => {\n  const heroesList = useSelector((state: RootState) => state.superHeroes.list)\n  const [isLoading, setIsLoading] = useState(false)\n  const [alertDanger, setAlertDanger] = useState(false)\n  const [filtered, setfFiltered] = useState(false)\n  const [filteredHeroesList, setFilteredHeroesList] = useState([] as Hero[] as any[])\n  const [filterOption, setFilterOption] = useState<IFilter>({\n    characteristic: null,\n    value: null,\n  })\n\n  const handleSelectChange = (name: string) => (e: SingleValue<OSelect | null>) => {\n    setFilterOption({ ...filterOption, [name]: e })\n  }\n\n  const showAlertIfNotSelected = () => {\n    if (!filterOption.characteristic || !filterOption.value) {\n      setAlertDanger(true)\n      setTimeout(() => {\n        setAlertDanger(false)\n      }, 3000)\n    }\n  }\n\n  const handleFilter = () => {\n    showAlertIfNotSelected()\n    const { characteristic, value } = filterOption\n    const property = characteristic?.value\n\n    if (property && value) {\n      setIsLoading(true)\n      const filteredHeroes = heroesList.filter((hero: Hero) => {\n        if (property === 'height' || property === 'weight') {\n          const heroProperty = hero.appearance[property]\n          if (heroProperty) return heroProperty[1].includes(value)\n          return false\n        }\n        return hero.appearance[property]?.toString().toLowerCase().trim() === value.toString().toLowerCase().trim()\n      })\n      setfFiltered(true)\n      setFilteredHeroesList(filteredHeroes)\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"custom-container\">\n      <h2>Apariencia</h2>\n      <p>\n        Desde este módulo puedes filtrar la lista de Super Héroes previamente cargada en el Inicio{' '}\n        <small>(dashboard)</small> por apariencia. Selecciona una característica y un valor para filtrar. Podrás ver\n        todas las coincidencias con la descripción ingresada. Ten en cuenta que el filtro es estricto y los valores\n        deben ser ingresados en ingles.\n      </p>\n\n      {alertDanger && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          Debe seleccionar una característica e ingresar un valor caracteristico para poder filtrar.\n        </div>\n      )}\n\n      <div className=\"row\">\n        <div className=\"col-md-5\">\n          <Select\n            className=\"mt-1 mb-1\"\n            isClearable\n            onChange={handleSelectChange('characteristic')}\n            options={SelectAppearanceOptions}\n            placeholder=\"Selecciona una característica\"\n            value={filterOption.characteristic}\n          />\n        </div>\n        <div className=\"col-md-5\">\n          <Input\n            autoComplete=\"off\"\n            className=\"mt-1 mb-1\"\n            id=\"input-filter-value\"\n            onChange={(e) => setFilterOption({ ...filterOption, value: e.target.value })}\n            placeholder=\"Ingresa el valor característico\"\n            value={filterOption.value}\n          />\n        </div>\n        <div className=\"col-md-2\">\n          <div className=\"d-grid gap-2 mt-1 mb-1\">\n            <button type=\"button\" id=\"btn-order-powerstats\" className=\"btn btn-primary\" onClick={handleFilter}>\n              Filtrar\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"mt-5 mb-3\">\n          <div className=\"row\">\n            {filteredHeroesList.length > 0 &&\n              filteredHeroesList.map((hero) => (\n                <div className=\"col-md-4\" key={hero.id}>\n                  <CardHero\n                    name={hero.name}\n                    powerstats={hero.powerstats}\n                    fullName={hero.biography[`full-name`]}\n                    alignment={hero.biography.alignment}\n                    appearance={hero.appearance}\n                    image={hero.image}\n                    showAppearance\n                  />\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n\n      {heroesList.length === 0 && (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          No existen héroes en la lista. Vuelva al{' '}\n          <a href=\"/superhero-react-app\" className=\"alert-link\">\n            Inicio\n          </a>{' '}\n          para precargar algunos.\n        </div>\n      )}\n\n      {filtered && filteredHeroesList.length === 0 && (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          No se encontraron coincidencias con el filtro.\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Apariencia\n","import PropTypes from 'prop-types'\n\ninterface ProgressBarProps {\n  progress: number\n  title?: string\n  ariaMax?: number\n}\n\nconst ProgressBar = ({ progress, title, ariaMax }: ProgressBarProps) => (\n  <div className=\"progress mt-1\">\n    <div\n      className=\"progress-bar\"\n      role=\"progressbar\"\n      style={{ width: `${progress}%` }}\n      aria-valuenow={progress}\n      aria-valuemin={0}\n      aria-valuemax={ariaMax}\n    >\n      {`${progress}% ${title}`}\n    </div>\n  </div>\n)\n\nProgressBar.propTypes = {\n  progress: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  ariaMax: PropTypes.number,\n}\n\nProgressBar.defaultProps = {\n  title: '',\n  ariaMax: 100,\n}\n\nexport default ProgressBar\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport { Appearance, Image, Powerstats } from 'interfaces/Hero.interface'\nimport ProgressBar from './ProgressBar'\n\ninterface CardProps {\n  alignment: string\n  appearance: Appearance | any\n  fullName: string\n  image: Image\n  name: string\n  powerstats: Powerstats\n  showAppearance?: boolean\n  showPowerStats?: boolean\n}\n\nconst index = (props: CardProps) => {\n  const {\n    alignment,\n    appearance,\n    fullName,\n    image,\n    name,\n    powerstats,\n    showAppearance = false,\n    showPowerStats = false,\n  } = props\n  return (\n    <div className=\"card p-3 mb-2\">\n      <div className=\"d-flex justify-content-between\">\n        <div className=\"d-flex flex-row align-items-center\">\n          <div className=\"avatar\">\n            <img className=\"img-fluid\" src={image.url} alt={`${name}.profile`} />\n          </div>\n          <div className=\"ms-2 c-details\">\n            <h6 className=\"mb-0\">{name}</h6> <span>{fullName}</span>\n          </div>\n        </div>\n        <div className={`alignment-container fst-italic ${alignment === 'good' ? 'text-success' : 'text-warning'}`}>\n          {' '}\n          <span>{alignment}</span>{' '}\n        </div>\n      </div>\n      {showPowerStats && (\n        <div>\n          <div className=\"mt-3\">\n            <span>Combate:</span> <ProgressBar progress={Number(powerstats.combat) || 0} />\n            <span>Durabilidad:</span> <ProgressBar progress={Number(powerstats.durability) || 0} ariaMax={80} />\n            <span>Inteligencia:</span> <ProgressBar progress={Number(powerstats.intelligence) || 0} ariaMax={80} />\n            <span>Poder:</span> <ProgressBar progress={Number(powerstats.power) || 0} ariaMax={80} />\n            <span>Velocidad:</span> <ProgressBar progress={Number(powerstats.speed) || 0} ariaMax={80} />\n            <span>Fuerza:</span> <ProgressBar progress={Number(powerstats.strength) || 0} ariaMax={80} />\n          </div>\n        </div>\n      )}\n      {showAppearance && (\n        <div className=\"mt-3\">\n          <hr />\n          <h5 className=\"text-primary\">Apariencia</h5>\n          <table className=\"table table-sm\">\n            <tbody>\n              <tr>\n                <td className=\"fst-italic\">Genero</td>\n                <td className=\"fw-light\">{appearance.gender}</td>\n              </tr>\n              <tr>\n                <td className=\"fst-italic\">Raza</td>\n                <td className=\"fw-light\">{appearance.race}</td>\n              </tr>\n              <tr>\n                <td className=\"fst-italic\">Altura</td>\n                <td className=\"fw-light\">{appearance.height[1]}</td>\n              </tr>\n              <tr>\n                <td className=\"fst-italic\">Peso</td>\n                <td className=\"fw-light\">{appearance.weight[1]}</td>\n              </tr>\n              <tr>\n                <td className=\"fst-italic\">Color de ojos</td>\n                <td className=\"fw-light\">{appearance['eye-color']}</td>\n              </tr>\n              <tr>\n                <td className=\"fst-italic\">Color de pelo</td>\n                <td className=\"fw-light\">{appearance['hair-color']}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default index\n","export const SelectPowerstatsOptions = [\n  {\n    label: 'Inteligencia',\n    value: 'intelligence',\n  },\n  {\n    label: 'Fuerza',\n    value: 'strength',\n  },\n  {\n    label: 'Velocidad',\n    value: 'speed',\n  },\n  {\n    label: 'Durabilidad',\n    value: 'durability',\n  },\n  {\n    label: 'Poder',\n    value: 'power',\n  },\n  {\n    label: 'Combate',\n    value: 'combat',\n  },\n]\n\nexport const SortOptions = [\n  {\n    label: 'Ascendente',\n    value: 'asc',\n  },\n  {\n    label: 'Descendente',\n    value: 'desc',\n  },\n]\n\nexport const SelectAppearanceOptions = [\n  {\n    label: 'Genero',\n    value: 'gender',\n  },\n  {\n    label: 'Raza',\n    value: 'race',\n  },\n  {\n    label: 'Altura (cm)',\n    value: 'height',\n  },\n  {\n    label: 'Peso (kg)',\n    value: 'weight',\n  },\n  {\n    label: 'Color de ojos',\n    value: 'eye-color',\n  },\n  {\n    label: 'Color de pelo',\n    value: 'hair-color',\n  },\n]\n"],"sourceRoot":""}